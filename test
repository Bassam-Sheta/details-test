<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Quiz Application</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #FFFFFF;
      color: #000000;
      margin: 0;
      padding: 0;
    }
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 20px auto;
    }
    h1, h2, h3, p {
      margin: 10px 0;
    }
    .start-dialog, .quiz, .result {
      border: 1px solid #ccc;
      padding: 20px;
      border-radius: 6px;
      background-color: #f9f9f9;
    }
    .start-dialog input[type="text"] {
      width: 100%;
      padding: 10px;
      font-size: 18px;
      margin-bottom: 10px;
    }
    .btn {
      background-color: #4CAF50;
      color: #FFFFFF;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      font-size: 18px;
      cursor: pointer;
    }
    .btn:hover {
      background-color: #45a049;
    }
    .question {
      margin-bottom: 20px;
    }
    .sub-question {
      border-bottom: 1px solid #ddd;
      padding: 8px 0;
    }
    .canvas-container {
      display: flex;
      justify-content: space-around;
      margin: 10px 0;
    }
    canvas {
      border: 1px solid #000;
    }
    .checkbox-group, .ordering-group {
      margin: 10px 0;
    }
    .ordering-item {
      padding: 8px;
      margin: 4px 0;
      background: #eee;
      cursor: move;
      border: 1px solid #ccc;
    }
    .drag-over {
      border: 2px dashed #000;
    }
    .timer {
      font-size: 26px;
      font-weight: bold;
      text-align: center;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Start Dialog -->
    <div id="startDialog" class="start-dialog">
      <h2>Welcome to the Test</h2>
      <p>Please note that this test is 10 minutes long in total.</p>
      <input type="text" id="usernameInput" placeholder="Name please" />
      <button id="startBtn" class="btn">Submit</button>
    </div>
    
    <!-- Quiz Section -->
    <div id="quizSection" class="quiz" style="display: none;">
      <div class="timer" id="timerDisplay">Time: 0</div>
      <div id="questionContainer"></div>
      <div style="margin-top: 20px;">
        <button id="submitBtn" class="btn">Submit</button>
        <button id="skipBtn" class="btn">Skip</button>
      </div>
    </div>
    
    <!-- Result Section -->
    <div id="resultSection" class="result" style="display: none;">
      <h2>Quiz Completed!</h2>
      <p id="resultMessage"></p>
    </div>
  </div>
  
  <script>
    // --- Quiz Data & State ---
    let username = "";
    let currentQuestionIndex = 0;
    let score = 0;
    let timerInterval = null;
    let remainingTime = 0;
    const quizStartTime = new Date();
    const logEntries = [];
    
    // Define the questions similar to the Python version.
    const questions = (function() {
      // Q1: Y/N sub-questions
      const q1 = {
        question: "Question 1: Global Client Audit",
        instructions: "Mark Y (Match) or N (Mismatch) for each sub-item.",
        type: "y_n_subq",
        time: 120,
        sub_questions: [
          { item: "Client Name", paper: "Dr. Emília Rodríguez-Sánchez", screen: "Dr. Emilía Rodriguez-Sanchez", correct: "N" },
          { item: "Account ID", paper: "#AC-2023-0I9B4Q", screen: "#AC-2023-0I9B4Q", correct: "Y" },
          { item: "Invoice Date", paper: "10.04.2024", screen: "10/04/2024", correct: "N" },
          { item: "Email", paper: "support@corpα.com (Greek 'α')", screen: "support@corpα.com", correct: "Y" },
          { item: "SWIFT Code", paper: "DEUTDEDB380", screen: "DEUTDEDB3B0", correct: "N" },
          { item: "Address", paper: "45 Rue de la Paix, 7500₂, Paris", screen: "45 Rue de la Paix, 7500₂, Paris", correct: "Y" },
          { item: "Contract Value", paper: "¥12,345,678.90", screen: "¥12.345.678,90", correct: "N" },
          { item: "Payment Ref", paper: "TXN-ID: 8S2G7HJKᴮᴺ", screen: "TXN-ID: 8S2G7HJKᴮᴺ", correct: "Y" },
          { item: "Tax Code", paper: "IT-001234567-9", screen: "IT-0012345b7-9", correct: "N" },
          { item: "IBAN", paper: "GB29NWBK60161331926819", screen: "GB29NWBK60161331926819", correct: "Y" },
          { item: "Phone", paper: "+33 1 70 22 18 76", screen: "+33 1 70 22 81 76", correct: "N" },
          { item: "Delivery Code", paper: "DPD#XQ-ΓΤΨ-2024", screen: "DPD#XQ-ΓΤΦ-2024", correct: "N" }
        ]
      };
      
      // Q2: Checkbox with images (we use canvases to simulate QPainter drawings)
      function drawTable(canvasId, reportData) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        const width = canvas.width;
        const height = canvas.height;
        const rows = reportData.length;
        const cols = reportData[0].length;
        const cellW = 80, cellH = 25;
        ctx.fillStyle = "#FFFFFF";
        ctx.fillRect(0, 0, width, height);
        ctx.strokeStyle = "#000000";
        ctx.font = "10px Arial";
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < cols; j++) {
            const x = j * cellW, y = i * cellH;
            ctx.strokeRect(x, y, cellW, cellH);
            ctx.fillStyle = "#000000";
            ctx.fillText(reportData[i][j], x + 3, y + 17);
          }
        }
      }
      // Data for two reports
      const report1 = [
        ["Player#", "Goals", "KeyPass", "MotM?", "Bonus"],
        ["7", "2", "15", "yes", "A-2.5"],
        ["10", "5", "22", "no", "B-3"],
        ["12", "9", "28", "yes", "C-7"],
        ["15", "4", "20", "no", "D-2"],
        ["18", "7", "31", "yes", "E-5"],
        ["21", "10", "25", "no", "F-3"],
        ["24", "12", "20", "yes", "G-4"]
      ];
      const report2 = [
        ["Player#", "MotM?", "Bonus", "Goals", "KeyPass"],
        ["7", "yes", "A-2.5", "2", "15"],
        ["10", "no", "B-3", "6", "22"],
        ["12", "yes", "C-7", "8", "28"],
        ["15", "no", "D-2", "4", "20"],
        ["18", "yes", "E-5", "7", "31"],
        ["21", "no", "F-3", "10", "25"],
        ["24", "yes", "G-4,0", "12", "20"]
      ];
      // Create canvases dynamically and draw the tables later.
      const q2 = {
        question: "Question 2 of 3:\n\nBelow are two reports showing performance data for 7 players.\nSelect the players with inconsistent data.",
        type: "checkbox_image",
        time: 240,
        options: ["7", "10", "12", "15", "18", "21", "24"],
        correct_indices: [1, 2, 4, 6],  // players 10, 12, 18, 24 (0-based)
        reports: { report1, report2 }
      };
      
      // Q3: Ordering question (drag-and-drop list)
      const steps = [
        "Unlock drawer (code: 1122)",
        "Check delivery slip",
        "Restock cups",
        "Review whiteboard orders",
        "Fix machine alerts (if any)",
        "Handle custom orders",
        "Lock cash register",
        "Refill sugar jars",
        "Send summary text"
      ];
      const q3 = {
        question: "Question 3 of 3\n\nAttention to Detail\n\nYou’re covering for a barista who left a voicemail:\n“Hey! Thanks for helping out. First, check today’s delivery slip—it’s in the top drawer (code: 1122). After restocking cups, check the whiteboard for custom orders. If there’s a ‘machine maintenance’ alert, prioritize it over custom orders. Once done, lock the cash register, refill the sugar jars, and text me a summary. Oh, and refill the sugar jars after locking up! Don’t forget!”\n\nPlace the tasks in the correct order:",
        type: "ordering",
        time: 270,
        steps: steps
      };
      
      // Shuffle questions if desired; here we return them in order.
      return [q1, q2, q3];
    })();
    
    // --- Utility functions ---
    function shuffleArray(array) {
      // Simple Fisher-Yates shuffle
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }
    // (Optional) shuffle questions if desired:
    // questions = shuffleArray(questions);
    
    // --- Timer Functions ---
    function startTimer(duration, display, onTimeUp) {
      remainingTime = duration;
      display.textContent = "Time: " + remainingTime;
      timerInterval = setInterval(function() {
        remainingTime--;
        display.textContent = "Time: " + remainingTime;
        if (remainingTime <= 0) {
          clearInterval(timerInterval);
          onTimeUp();
        }
      }, 1000);
    }
    
    // --- Quiz UI Functions ---
    function loadQuestion() {
      clearInterval(timerInterval);
      const questionContainer = document.getElementById("questionContainer");
      questionContainer.innerHTML = ""; // clear previous question
      if (currentQuestionIndex >= questions.length) {
        endQuiz();
        return;
      }
      const qdata = questions[currentQuestionIndex];
      remainingTime = qdata.time || 270;
      document.getElementById("timerDisplay").textContent = "Time: " + remainingTime;
      
      // Question text
      const qElem = document.createElement("div");
      qElem.className = "question";
      const qTitle = document.createElement("h3");
      qTitle.textContent = qdata.question;
      qElem.appendChild(qTitle);
      
      if (qdata.instructions) {
        const instr = document.createElement("p");
        instr.textContent = qdata.instructions;
        qElem.appendChild(instr);
      }
      
      // Create UI based on question type
      if (qdata.type === "y_n_subq") {
        qdata.sub_questions.forEach((subq, idx) => {
          const subDiv = document.createElement("div");
          subDiv.className = "sub-question";
          const label = document.createElement("label");
          label.textContent = subq.item + " | Paper: " + subq.paper + " | Screen: " + subq.screen;
          subDiv.appendChild(label);
          // Radio buttons for Y/N
          const radioY = document.createElement("input");
          radioY.type = "radio";
          radioY.name = "subq" + idx;
          radioY.value = "Y";
          const labelY = document.createElement("label");
          labelY.textContent = " Y ";
          const radioN = document.createElement("input");
          radioN.type = "radio";
          radioN.name = "subq" + idx;
          radioN.value = "N";
          const labelN = document.createElement("label");
          labelN.textContent = " N ";
          subDiv.appendChild(document.createElement("br"));
          subDiv.appendChild(radioY);
          subDiv.appendChild(labelY);
          subDiv.appendChild(radioN);
          subDiv.appendChild(labelN);
          qElem.appendChild(subDiv);
        });
      } else if (qdata.type === "checkbox_image") {
        // Create canvas elements for each report
        const canvasContainer = document.createElement("div");
        canvasContainer.className = "canvas-container";
        const canvas1 = document.createElement("canvas");
        canvas1.id = "canvas1";
        canvas1.width = 400;
        canvas1.height = 200;
        const canvas2 = document.createElement("canvas");
        canvas2.id = "canvas2";
        canvas2.width = 400;
        canvas2.height = 200;
        canvasContainer.appendChild(canvas1);
        canvasContainer.appendChild(canvas2);
        qElem.appendChild(canvasContainer);
        // Draw the tables once the canvas elements are added to the DOM.
        setTimeout(() => {
          drawTable("canvas1", qdata.reports.report1);
          drawTable("canvas2", qdata.reports.report2);
        }, 100);
        // Create checkboxes for options
        const cbGroup = document.createElement("div");
        cbGroup.className = "checkbox-group";
        qdata.options.forEach((option, idx) => {
          const cbLabel = document.createElement("label");
          const checkbox = document.createElement("input");
          checkbox.type = "checkbox";
          checkbox.value = idx;
          cbLabel.appendChild(checkbox);
          cbLabel.appendChild(document.createTextNode(" " + option));
          cbGroup.appendChild(cbLabel);
          cbGroup.appendChild(document.createElement("br"));
        });
        qElem.appendChild(cbGroup);
      } else if (qdata.type === "ordering") {
        // Create a list for ordering
        const listContainer = document.createElement("div");
        listContainer.className = "ordering-group";
        // Shuffle the steps for initial random order
        const shuffledSteps = qdata.steps.slice().sort(() => Math.random() - 0.5);
        const list = document.createElement("ul");
        list.id = "orderingList";
        list.style.listStyleType = "none";
        shuffledSteps.forEach(step => {
          const li = document.createElement("li");
          li.textContent = step;
          li.className = "ordering-item";
          li.draggable = true;
          list.appendChild(li);
        });
        listContainer.appendChild(list);
        qElem.appendChild(listContainer);
        // Add drag and drop handlers
        addDragAndDropHandlers();
      }
      
      questionContainer.appendChild(qElem);
      
      // Start the timer
      startTimer(remainingTime, document.getElementById("timerDisplay"), () => {
        submitAnswer(true);
      });
    }
    
    // --- Drag and Drop for Ordering ---
    function addDragAndDropHandlers() {
      const list = document.getElementById("orderingList");
      let dragSrcEl = null;
      
      function handleDragStart(e) {
        dragSrcEl = this;
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', this.innerHTML);
      }
      
      function handleDragOver(e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
        e.dataTransfer.dropEffect = 'move';
        return false;
      }
      
      function handleDragEnter(e) {
        this.classList.add('drag-over');
      }
      
      function handleDragLeave(e) {
        this.classList.remove('drag-over');
      }
      
      function handleDrop(e) {
        if (e.stopPropagation) {
          e.stopPropagation();
        }
        if (dragSrcEl !== this) {
          dragSrcEl.innerHTML = this.innerHTML;
          this.innerHTML = e.dataTransfer.getData('text/html');
        }
        return false;
      }
      
      function handleDragEnd(e) {
        this.classList.remove('drag-over');
        const items = list.querySelectorAll('.ordering-item');
        items.forEach(item => item.classList.remove('drag-over'));
      }
      
      const items = list.querySelectorAll('.ordering-item');
      items.forEach(item => {
        item.addEventListener('dragstart', handleDragStart, false);
        item.addEventListener('dragenter', handleDragEnter, false);
        item.addEventListener('dragover', handleDragOver, false);
        item.addEventListener('dragleave', handleDragLeave, false);
        item.addEventListener('drop', handleDrop, false);
        item.addEventListener('dragend', handleDragEnd, false);
      });
    }
    
    // --- Answer Submission ---
    function submitAnswer(auto = false) {
      clearInterval(timerInterval);
      const qdata = questions[currentQuestionIndex];
      let subScore = 0;
      let totalSub = 0;
      let logText = `User: ${username} | Q: ${qdata.question}\n`;
      
      if (qdata.type === "y_n_subq") {
        qdata.sub_questions.forEach((subq, idx) => {
          totalSub++;
          const radios = document.getElementsByName("subq" + idx);
          let answer = null;
          radios.forEach(r => { if (r.checked) answer = r.value; });
          logText += `${subq.item} => user: ${answer || "No answer"}, correct: ${subq.correct}\n`;
          if (answer === subq.correct) {
            subScore++;
          }
        });
        logText += `Score: ${subScore} / ${totalSub}\n`;
      } else if (qdata.type === "checkbox_image") {
        totalSub = qdata.options.length;
        const checkboxes = document.querySelectorAll(".checkbox-group input[type='checkbox']");
        const userIndices = [];
        checkboxes.forEach((cb, idx) => { if (cb.checked) userIndices.push(parseInt(cb.value)); });
        logText += `User selected: ${userIndices}\nCorrect: ${qdata.correct_indices}\n`;
        // If the user selection exactly matches the correct indices, give full points.
        if (arraysEqual(userIndices.sort(), qdata.correct_indices.sort())) {
          subScore = totalSub;
        }
        logText += `Score: ${subScore} / ${totalSub}\n`;
      } else if (qdata.type === "ordering") {
        const listItems = document.querySelectorAll("#orderingList li");
        totalSub = listItems.length;
        const userOrder = [];
        listItems.forEach(li => userOrder.push(li.textContent));
        logText += "User's order:\n";
        userOrder.forEach((step, i) => {
          logText += `${i + 1}. ${step}\n`;
        });
        // Compare with correct order
        qdata.steps.forEach((step, idx) => {
          if (userOrder[idx] === step) subScore++;
        });
        logText += `Score: ${subScore} / ${totalSub}\n`;
      }
      
      score += subScore;
      logEntries.push(logText);
      currentQuestionIndex++;
      // Animate transition (a simple fade out/in effect)
      const quizSection = document.getElementById("quizSection");
      quizSection.style.opacity = 1;
      let fadeOut = setInterval(() => {
        if (quizSection.style.opacity > 0) {
          quizSection.style.opacity -= 0.1;
        } else {
          clearInterval(fadeOut);
          loadQuestion();
          let fadeIn = setInterval(() => {
            if (quizSection.style.opacity < 1) {
              quizSection.style.opacity = parseFloat(quizSection.style.opacity) + 0.1;
            } else {
              clearInterval(fadeIn);
            }
          }, 50);
        }
      }, 50);
    }
    
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    
    function skipQuestion() {
      clearInterval(timerInterval);
      currentQuestionIndex++;
      loadQuestion();
    }
    
    function endQuiz() {
      clearInterval(timerInterval);
      const quizSection = document.getElementById("quizSection");
      quizSection.style.display = "none";
      const resultSection = document.getElementById("resultSection");
      const totalPossible = questions.reduce((acc, q) => {
        if (q.type === "y_n_subq") return acc + q.sub_questions.length;
        if (q.type === "checkbox_image") return acc + q.options.length;
        if (q.type === "ordering") return acc + q.steps.length;
        return acc;
      }, 0);
      const finishTime = new Date();
      const details = `Start Time: ${quizStartTime.toLocaleString()}\nEnd Time: ${finishTime.toLocaleString()}\nTotal Score: ${score} out of ${totalPossible}\nLog Details:\n` + logEntries.join("\n");
      document.getElementById("resultMessage").innerText = details;
      resultSection.style.display = "block";
      
      // (Optional) Here you could trigger an email sending request or log the results to a server.
      console.log("Quiz Completed!\n" + details);
    }
    
    // --- Event Listeners ---
    document.getElementById("startBtn").addEventListener("click", function() {
      const input = document.getElementById("usernameInput").value.trim();
      if (!input) {
        alert("Please enter your name.");
        return;
      }
      username = input;
      document.getElementById("startDialog").style.display = "none";
      document.getElementById("quizSection").style.display = "block";
      loadQuestion();
    });
    
    document.getElementById("submitBtn").addEventListener("click", function() {
      submitAnswer();
    });
    
    document.getElementById("skipBtn").addEventListener("click", function() {
      skipQuestion();
    });
  </script>
</body>
</html>
